const fetch = require('node-fetch');

// Test du syst√®me de compte √† rebours
async function testCountdownSystem() {
  console.log('üß™ ========================================');
  console.log('üß™ TEST DU SYST√àME DE COMPTE √Ä REBOURS');
  console.log('üß™ ========================================\n');

  const baseUrl = 'http://localhost:5000/api';

  try {
    // Test 1: V√©rifier la sant√© du serveur
    console.log('1Ô∏è‚É£ Test de sant√© du serveur...');
    const healthResponse = await fetch(`${baseUrl}/health`);
    if (healthResponse.ok) {
      const health = await healthResponse.json();
      console.log('‚úÖ Serveur op√©rationnel');
      console.log(`   Uptime: ${Math.floor(health.uptime)}s`);
      console.log(`   Environment: ${health.environment}`);
    } else {
      throw new Error('Serveur non disponible');
    }

    console.log('\n2Ô∏è‚É£ Test de r√©cup√©ration du compte √† rebours...');
    const countdownResponse = await fetch(`${baseUrl}/countdown`);
    if (countdownResponse.ok) {
      const countdown = await countdownResponse.json();
      console.log('‚úÖ Compte √† rebours r√©cup√©r√© avec succ√®s');
      console.log(`   Temps restant: ${countdown.days}j ${countdown.hours}h ${countdown.minutes}m ${countdown.seconds}s`);
      console.log(`   Timestamp fin: ${new Date(countdown.endTime).toLocaleString()}`);
      console.log(`   Actif: ${countdown.isActive}`);
      console.log(`   Cycle red√©marr√©: ${countdown.cycleRestarted || false}`);
    } else {
      throw new Error('Impossible de r√©cup√©rer le compte √† rebours');
    }

    console.log('\n3Ô∏è‚É£ Test du statut du compte √† rebours...');
    const statusResponse = await fetch(`${baseUrl}/countdown/status`);
    if (statusResponse.ok) {
      const status = await statusResponse.json();
      console.log('‚úÖ Statut r√©cup√©r√© avec succ√®s');
      console.log(`   Actif: ${status.isActive}`);
      console.log(`   Progression: ${status.progress}%`);
      console.log(`   Temps √©coul√©: ${Math.floor(status.elapsedTime / 1000)}s`);
    }

    console.log('\n4Ô∏è‚É£ Test de red√©marrage du compte √† rebours...');
    const resetResponse = await fetch(`${baseUrl}/countdown/reset`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' }
    });
    if (resetResponse.ok) {
      const reset = await resetResponse.json();
      console.log('‚úÖ Compte √† rebours red√©marr√© avec succ√®s');
      console.log(`   Nouveau temps: ${reset.days}j ${reset.hours}h ${reset.minutes}m ${reset.seconds}s`);
    }

    console.log('\nüéâ TOUS LES TESTS SONT PASS√âS !');
    console.log('üéâ Le syst√®me est pr√™t pour le d√©ploiement sur Render\n');

  } catch (error) {
    console.error('‚ùå ERREUR LORS DU TEST:', error.message);
    console.log('\nüí° Actions √† effectuer:');
    console.log('   1. V√©rifier que le serveur backend est d√©marr√©');
    console.log('   2. Lancer: cd backend && npm start');
    console.log('   3. V√©rifier que le port 5000 est libre\n');
  }
}

// Lancer le test
testCountdownSystem();