// Test direct du backend Render
const fetch = require('node-fetch');

async function testRenderBackend() {
  console.log('üîç === TEST DU BACKEND RENDER ===\n');
  
  const baseUrl = 'https://k-a-e-l-e-n.onrender.com';
  
  console.log('üåê URL de base:', baseUrl);
  
  try {
    // Test 1: Root endpoint
    console.log('\n1Ô∏è‚É£ Test du endpoint racine...');
    const rootResponse = await fetch(baseUrl, { timeout: 10000 });
    console.log('Status:', rootResponse.status);
    
    if (rootResponse.ok) {
      const rootData = await rootResponse.json();
      console.log('‚úÖ Endpoint racine accessible');
      console.log('Donn√©es:', JSON.stringify(rootData, null, 2));
    } else {
      console.log('‚ùå Endpoint racine inaccessible');
    }
    
    // Test 2: Health check
    console.log('\n2Ô∏è‚É£ Test du health check...');
    const healthResponse = await fetch(`${baseUrl}/api/health`, { timeout: 10000 });
    console.log('Status:', healthResponse.status);
    
    if (healthResponse.ok) {
      const healthData = await healthResponse.json();
      console.log('‚úÖ Health check OK');
      console.log('Donn√©es:', JSON.stringify(healthData, null, 2));
    } else {
      console.log('‚ùå Health check √©chou√©');
      const errorText = await healthResponse.text();
      console.log('Erreur:', errorText);
    }
    
    // Test 3: Countdown endpoint
    console.log('\n3Ô∏è‚É£ Test du countdown endpoint...');
    const countdownResponse = await fetch(`${baseUrl}/api/countdown`, { 
      timeout: 10000,
      headers: {
        'Content-Type': 'application/json'
      }
    });
    console.log('Status:', countdownResponse.status);
    
    if (countdownResponse.ok) {
      const countdownData = await countdownResponse.json();
      console.log('‚úÖ Countdown endpoint OK');
      console.log('Donn√©es:', JSON.stringify(countdownData, null, 2));
    } else {
      console.log('‚ùå Countdown endpoint √©chou√©');
      const errorText = await countdownResponse.text();
      console.log('Erreur:', errorText);
    }
    
    console.log('\nüéØ === R√âSUM√â ===');
    console.log('Root endpoint:', rootResponse.ok ? '‚úÖ' : '‚ùå');
    console.log('Health endpoint:', healthResponse.ok ? '‚úÖ' : '‚ùå');
    console.log('Countdown endpoint:', countdownResponse.ok ? '‚úÖ' : '‚ùå');
    
    if (!rootResponse.ok) {
      console.log('\n‚ùå PROBL√àME MAJEUR: Le serveur Render ne r√©pond pas du tout');
      console.log('Solutions:');
      console.log('1. V√©rifier que le service Render est d√©marr√©');
      console.log('2. V√©rifier l\'URL de d√©ploiement');
      console.log('3. Consulter les logs Render');
    } else if (!healthResponse.ok || !countdownResponse.ok) {
      console.log('\n‚ö†Ô∏è PROBL√àME PARTIEL: Le serveur r√©pond mais certains endpoints ont des probl√®mes');
      console.log('Solutions:');
      console.log('1. V√©rifier les routes dans server.js');
      console.log('2. V√©rifier que countdownRoutes est bien import√©');
      console.log('3. Consulter les logs du serveur');
    } else {
      console.log('\nüéâ TOUT FONCTIONNE! Le probl√®me vient du frontend ou du CORS');
    }
    
  } catch (error) {
    console.error('\n‚ùå ERREUR FATALE:', error.message);
    
    if (error.message.includes('ENOTFOUND')) {
      console.log('üö® CAUSE: DNS ne peut pas r√©soudre k-a-e-l-e-n.onrender.com');
      console.log('SOLUTION: V√©rifier l\'URL de d√©ploiement Render');
    } else if (error.message.includes('timeout')) {
      console.log('üö® CAUSE: Timeout - Le serveur met trop de temps √† r√©pondre');
      console.log('SOLUTION: Le serveur Render peut √™tre en mode "sleep" et prendre du temps √† se r√©veiller');
    } else if (error.message.includes('ECONNREFUSED')) {
      console.log('üö® CAUSE: Connexion refus√©e');
      console.log('SOLUTION: Le serveur Render n\'est pas d√©marr√©');
    }
  }
}

testRenderBackend();